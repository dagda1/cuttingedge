"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIteratorController = void 0;
const task_1 = require("../task");
const future_1 = require("../future");
const claimed = Symbol.for('effection/v2/iterator-controller/claimed');
function createIteratorController(task, iterator, options) {
    let didHalt = false;
    let yieldingTo;
    let { produce, future } = future_1.createFuture();
    function start() {
        if (iterator[claimed]) {
            let error = new Error(`An operation iterator can only be run once in a single task, but it looks like has been either yielded to, or run multiple times`);
            error.name = 'DoubleEvalError';
            produce({ state: 'errored', error });
        }
        else {
            iterator[claimed] = true;
            resume(() => iterator.next());
        }
    }
    function resume(iter) {
        options.runLoop.run(() => {
            let next;
            try {
                next = iter();
            }
            catch (error) {
                produce({ state: 'errored', error });
                return;
            }
            if (next.done) {
                if (didHalt) {
                    produce({ state: 'halted' });
                }
                else {
                    produce({ state: 'completed', value: next.value });
                }
            }
            else {
                yieldingTo = task_1.createTask(next.value, { scope: task.options.yieldScope || task, ignoreError: true });
                yieldingTo.consume(trap);
                yieldingTo.start();
                options.onYieldingToChange && options.onYieldingToChange(yieldingTo);
            }
        });
    }
    function trap(value) {
        yieldingTo = undefined;
        options.onYieldingToChange && options.onYieldingToChange(undefined);
        if (value.state === 'completed') {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            resume(() => iterator.next(value.value));
        }
        if (value.state === 'errored') {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            resume(() => iterator.throw(value.error));
        }
        if (value.state === 'halted') {
            resume(() => iterator.return(undefined));
        }
    }
    function halt() {
        if (!didHalt) {
            didHalt = true;
            if (yieldingTo) {
                yieldingTo.halt();
            }
            else {
                resume(() => iterator.return(undefined));
            }
        }
    }
    return { start, halt, future, type: 'generator', operation: iterator };
}
exports.createIteratorController = createIteratorController;
//# sourceMappingURL=iterator-controller.js.map