import { isObjectOperation } from './predicates';
import { Symbol } from './symbol';
/**
 * Apply the given labels to an operation. When the operation is run as a task,
 * using {@link run} or {@link spawn}, the labels get applied to the task as
 * well.
 *
 * If the task operation already has labels, the existing labels are not
 * removed. See {@link setLabels} if you want to replace the existing labels
 * entirely.
 */
export function withLabels(operation, labels) {
    if (isObjectOperation(operation)) {
        let original = operation[Symbol.operation];
        return Object.assign(operation, {
            ...labels,
            [Symbol.operation]: original
        });
    }
    else if (operation) {
        operation.labels = { ...(operation.labels || {}), ...labels };
    }
    return operation;
}
/**
 * Like {@link withLabels}, but replaces the existing labels entirely.
 */
export function setLabels(operation, labels) {
    if (isObjectOperation(operation)) {
        let original = operation[Symbol.operation];
        operation = {
            ...labels,
            [Symbol.operation]: original
        };
    }
    else if (operation) {
        operation.labels = labels;
    }
    return operation;
}
export function extractLabels(operation) {
    if (!isObjectOperation(operation)) {
        return {
            ...((operation === null || operation === void 0 ? void 0 : operation.name) ? { name: operation === null || operation === void 0 ? void 0 : operation.name } : null),
            ...operation === null || operation === void 0 ? void 0 : operation.labels
        };
    }
    let labels = {};
    for (let key in operation) {
        let value = operation[key];
        if (typeof value == 'string'
            || typeof value == 'number'
            || typeof value == 'boolean')
            labels[key] = value;
    }
    return labels;
}
//# sourceMappingURL=labels.js.map