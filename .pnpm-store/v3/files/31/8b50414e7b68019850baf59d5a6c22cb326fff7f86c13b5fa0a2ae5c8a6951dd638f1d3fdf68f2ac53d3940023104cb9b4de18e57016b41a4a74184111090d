/// <reference types="node" />
import "./types/fstream";
import https from "https";
import { FS } from "./fs";
import { LoggerWithErrors } from "./logging";
export declare function readFile(path: string): Promise<string>;
export declare function readFileSync(path: string): string;
/** If a file doesn't exist, warn and tell the step it should have been generated by. */
export declare function readFileAndWarn(generatedBy: string, filePath: string): Promise<object>;
export declare function readJsonSync(path: string): unknown;
export declare function readJsonSync<T>(path: string, predicate: (parsed: unknown) => parsed is T): T;
export declare function readJson(path: string): Promise<unknown>;
export declare function readJson<T>(path: string, predicate: (parsed: unknown) => parsed is T): Promise<T>;
export declare function tryReadJson(path: string): Promise<unknown>;
export declare function tryReadJson<T>(path: string, predicate: (parsed: unknown) => parsed is T): Promise<T | undefined>;
export declare function writeFile(path: string, content: string): Promise<void>;
export declare function writeJson(path: string, content: unknown, formatted?: boolean): Promise<void>;
export declare function streamOfString(text: string): NodeJS.ReadableStream;
export declare function stringOfStream(stream: NodeJS.ReadableStream, description: string): Promise<string>;
export declare function streamDone(stream: NodeJS.WritableStream): Promise<void>;
declare type FetchOptions = https.RequestOptions & {
    readonly retries?: boolean | number;
    readonly body?: string;
};
export declare class Fetcher {
    private readonly agent;
    fetchJson(options: FetchOptions): Promise<unknown>;
    fetch(options: FetchOptions): Promise<string>;
}
/** Only used for testing. */
export declare function makeHttpRequest(options: FetchOptions): Promise<string>;
export declare function isDirectory(path: string): Promise<boolean>;
export declare const npmInstallFlags = "--ignore-scripts --no-shrinkwrap --no-package-lock --no-bin-links --no-save --no-audit --no-fund";
export declare function downloadAndExtractFile(url: string, log: LoggerWithErrors): Promise<FS>;
export declare function gzip(input: NodeJS.ReadableStream): NodeJS.ReadableStream;
export declare function unGzip(input: NodeJS.ReadableStream): NodeJS.ReadableStream;
export declare function writeTgz(inputDirectory: string, outFileName: string): Promise<void>;
export declare function createTgz(dir: string, onError: (error: Error) => void): NodeJS.ReadableStream;
export {};
