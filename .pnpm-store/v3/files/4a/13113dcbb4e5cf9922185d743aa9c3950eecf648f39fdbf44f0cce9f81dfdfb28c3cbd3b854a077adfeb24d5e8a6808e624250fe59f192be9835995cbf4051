{"version":3,"file":"type.js","sourceRoot":"","sources":["type.ts"],"names":[],"mappings":";;;AASa,QAAA,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC","sourcesContent":["/**\n * Created by user on 2018/3/30/030.\n */\nimport { toNamespacedPath, ParsedPath, PlatformPath } from 'path';\nimport pathPlatform from \"path\";\n\nexport type IPathPlatformOrigin = 'win32' | 'posix'\nexport type IPathPlatform = IPathPlatformOrigin | 'upath' | 'node'\n\nexport const ORIGIN_KEY = Symbol.for('_origin');\n\nexport interface IParse extends Partial<ParsedPath>\n{\n\n}\n\nexport type IPathType = PlatformPath | IPath | IPathNode\n\nexport interface IPathNode extends Pick<PlatformPath, 'toNamespacedPath' | 'delimiter' | 'sep' | 'isAbsolute' | 'extname' | 'dirname' | 'format' | 'parse' | 'resolve' | 'relative' | 'normalize' | 'join' | 'basename'>\n{\n\twin32?: IPathNode;\n\tposix?: IPathNode;\n}\n\nexport interface IPath extends Omit<IPathNode, 'win32' | 'posix' | 'default'>\n{\n\tname?: string | IPathPlatform;\n\n\twin32?: IPath;\n\tposix?: IPath;\n\tupath?: IPath;\n\n\tjoin<T = string, U = string>(path: T, ...paths: U[]): string;\n\tnormalize<T extends string = string>(path: T): string;\n\trelative<T extends string = string, U extends string = string>(from: T, to: U): string;\n\tresolve<T = string, U = string>(path: T, ...paths: U[]): string;\n\tparse<T extends string = string>(path: T): ParsedPath;\n\tformat<T = IParse>(pathObject: T): string;\n\tbasename<T extends string = string, U extends string = string>(path: T, ext?: U): string;\n\tdirname<T extends string = string>(path: T): string;\n\textname<T extends string = string>(path: T): string;\n\tisAbsolute<T extends string = string>(path: T): boolean;\n\n\tfn?: IPath;\n\n\tdefault?: IPath;\n\n\t[ORIGIN_KEY]?: IPathType;\n\n\t//[index: string]: any;\n}\n"]}