/// <reference types="node" />
import { EventEmitter } from 'events';
/**
 * An object which is able to emit events, and provides methods to subsribe and
 * unsubscribe to these events. Both
 * [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)
 * from the browser DOM and
 * [`EventEmitter`](https://nodejs.org/api/events.html#events_class_eventemitter)
 * from node are supported.
 */
export declare type EventSource = EventEmitterSource | EventTargetSource;
export declare function addListener<TArgs extends unknown[] = [unknown]>(source: EventSource, name: string, listener: (...args: TArgs) => void): void;
export declare function removeListener<TArgs extends unknown[] = [unknown]>(source: EventSource, name: string, listener: (...args: TArgs) => void): void;
interface EventTargetSource {
    addEventListener: EventTarget["addEventListener"];
    removeEventListener: EventTarget["removeEventListener"];
}
interface EventEmitterSource {
    on: EventEmitter["on"];
    off: EventEmitter["off"];
}
export {};
//# sourceMappingURL=event-source.d.ts.map