"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatError = exports.formatStack = exports.formatEffection = exports.formatMessage = exports.formatName = void 0;
const error_1 = require("./error");
const chalk_1 = __importDefault(require("chalk"));
const stacktrace_parser_1 = require("stacktrace-parser");
function formatName(error) {
    return chalk_1.default.bgRed.white.bold(error.name);
}
exports.formatName = formatName;
function formatMessage(error) {
    return error.message;
}
exports.formatMessage = formatMessage;
function formatEffection(error) {
    if (error.effectionTrace) {
        let stack = error.effectionTrace.map((task) => {
            let labels = Object.entries(task.labels).filter(([key]) => key !== 'name').map(([key, value]) => {
                return `${key}=${chalk_1.default.bold(value)}`;
            });
            return [
                chalk_1.default.grey('  -'),
                chalk_1.default.yellow(task.labels.name || 'task'),
                ...labels,
                chalk_1.default.grey(task.type),
                chalk_1.default.grey(`[${task.id}]`),
            ].join(' ');
        });
        return chalk_1.default.whiteBright.bold("Effection:\n") + stack.join('\n');
    }
}
exports.formatEffection = formatEffection;
function formatStack(error) {
    if (error.stack) {
        let stack = stacktrace_parser_1.parse(error.stack).map((item) => {
            return [
                chalk_1.default.grey('  -'),
                item.methodName && chalk_1.default.cyan(item.methodName),
                item.file && chalk_1.default.grey(`${item.file}:${item.lineNumber}:${item.column}`),
            ].filter(Boolean).join(' ');
        });
        return chalk_1.default.whiteBright.bold("Stacktrace:\n") + stack.join('\n');
    }
}
exports.formatStack = formatStack;
function formatError(error) {
    if (error_1.isMainError(error)) {
        return [
            error.message && formatMessage(error),
        ].filter(Boolean).join('\n\n');
    }
    else {
        return [
            formatName(error),
            formatMessage(error),
            formatEffection(error),
            formatStack(error),
        ].filter(Boolean).join('\n\n');
    }
}
exports.formatError = formatError;
//# sourceMappingURL=format-error-node.js.map