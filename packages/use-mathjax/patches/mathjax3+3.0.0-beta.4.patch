# generated by patch-package 6.4.11
#
# command:
#   npx patch-package mathjax3
#
# declared package:
#   mathjax3: 3.0.0-beta.4
#
diff --git a/node_modules/mathjax3/mathjax3-ts/input/tex/mhchem/mhchem_parser.js b/node_modules/mathjax3/mathjax3-ts/input/tex/mhchem/mhchem_parser.js
index a330e98..299923d 100644
--- a/node_modules/mathjax3/mathjax3-ts/input/tex/mhchem/mhchem_parser.js
+++ b/node_modules/mathjax3/mathjax3-ts/input/tex/mhchem/mhchem_parser.js
@@ -1,8 +1,10 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 //
 // Core parser for mhchem syntax  (recursive)
 //
 /** @type {MhchemParser} */
-export var mhchemParser = {
+var mhchemParser = {
   //
   // Parses mchem \ce syntax
   //
@@ -1283,7 +1285,7 @@ mhchemParser.stateMachines = {
 // texify: Take MhchemParser output and convert it to TeX
 //
 /** @type {Texify} */
-export var texify = {
+var texify = {
   go: function (input, isInner) {  // (recursive, max 4 levels)
     if (!input) { return ""; }
     var res = "";
@@ -1606,7 +1608,11 @@ export var texify = {
 // Will show type error at calling position
 //
 /** @param {number} a */
-export function assertNever(a) {}
+function assertNever(a) {}
 /** @param {string} a */
-export function assertString(a) {}
+function assertString(a) {}
 
+exports.assertNever = assertNever;
+exports.assertString = assertString;
+exports.mhchemParser = mhchemParser;
+exports.texify = texify;
\ No newline at end of file
diff --git a/node_modules/mathjax3/mathjax3/input/tex/mhchem/mhchem_parser.js b/node_modules/mathjax3/mathjax3/input/tex/mhchem/mhchem_parser.js
index a330e98..299923d 100644
--- a/node_modules/mathjax3/mathjax3/input/tex/mhchem/mhchem_parser.js
+++ b/node_modules/mathjax3/mathjax3/input/tex/mhchem/mhchem_parser.js
@@ -1,8 +1,10 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
 //
 // Core parser for mhchem syntax  (recursive)
 //
 /** @type {MhchemParser} */
-export var mhchemParser = {
+var mhchemParser = {
   //
   // Parses mchem \ce syntax
   //
@@ -1283,7 +1285,7 @@ mhchemParser.stateMachines = {
 // texify: Take MhchemParser output and convert it to TeX
 //
 /** @type {Texify} */
-export var texify = {
+var texify = {
   go: function (input, isInner) {  // (recursive, max 4 levels)
     if (!input) { return ""; }
     var res = "";
@@ -1606,7 +1608,11 @@ export var texify = {
 // Will show type error at calling position
 //
 /** @param {number} a */
-export function assertNever(a) {}
+function assertNever(a) {}
 /** @param {string} a */
-export function assertString(a) {}
+function assertString(a) {}
 
+exports.assertNever = assertNever;
+exports.assertString = assertString;
+exports.mhchemParser = mhchemParser;
+exports.texify = texify;
\ No newline at end of file
